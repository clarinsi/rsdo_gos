// <auto-generated />
using System;
using Gos.Services.Framework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Gos.Services.Migrations
{
    [DbContext(typeof(GosDbContext))]
    partial class GosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Gos.Core.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("ObjectType")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TraceIdentifier")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Gos.Core.Entities.CorpusCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Discourses")
                        .HasColumnType("integer");

                    b.Property<int>("Statements")
                        .HasColumnType("integer");

                    b.Property<int>("Words")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CorpusCounters");
                });

            modelBuilder.Entity("Gos.Core.Entities.CorpusForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Lemma")
                        .HasColumnType("text");

                    b.Property<string>("StandardForm")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CorpusForms");
                });

            modelBuilder.Entity("Gos.Core.Entities.Discourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSpeakers")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EventId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TypeId");

                    b.ToTable("Discourses");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("DiscourseChannels");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseChannelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("DiscourseChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscourseChannelId");

                    b.ToTable("DiscourseChannelTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("DiscourseEvents");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseEventTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("DiscourseEventId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscourseEventId");

                    b.ToTable("DiscourseEventTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("DiscourseRegions");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseRegionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("DiscourseRegionId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscourseRegionId");

                    b.ToTable("DiscourseRegionTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("DiscourseTypes");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("DiscourseTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscourseTypeId");

                    b.ToTable("DiscourseTypeTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.Msd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Msds");
                });

            modelBuilder.Entity("Gos.Core.Entities.MsdTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("MsdId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MsdId");

                    b.ToTable("MsdTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<short>("RecordOrder")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PartOfSpeeches");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("PartOfSpeechId")
                        .HasColumnType("integer");

                    b.Property<short>("RecordOrder")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechId");

                    b.ToTable("PartOfSpeechAttribute");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttributeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("PartOfSpeechAttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechAttributeId");

                    b.ToTable("PartOfSpeechAttributeTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int?>("PartOfSpeechAttributeId")
                        .HasColumnType("integer");

                    b.Property<short>("RecordOrder")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechAttributeId");

                    b.ToTable("PartOfSpeechAttributeValue");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttributeValueTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("PartOfSpeechAttributeValueId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechAttributeValueId");

                    b.ToTable("PartOfSpeechAttributeValueTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("PartOfSpeechId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechId");

                    b.ToTable("PartOfSpeechTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("SoundFile")
                        .HasColumnType("text");

                    b.Property<int?>("StatementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Gos.Core.Entities.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AgeId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int?>("EducationId")
                        .HasColumnType("integer");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int?>("Region1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Region2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Region3Id")
                        .HasColumnType("integer");

                    b.Property<int?>("SexId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgeId");

                    b.HasIndex("EducationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Region1Id");

                    b.HasIndex("Region2Id");

                    b.HasIndex("Region3Id");

                    b.HasIndex("SexId");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerAge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("SpeakerAges");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerAgeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("SpeakerAgeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerAgeId");

                    b.ToTable("SpeakerAgeTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("SpeakerEducations");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerEducationTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("SpeakerEducationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerEducationId");

                    b.ToTable("SpeakerEducationTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("SpeakerLanguages");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerLanguageTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("SpeakerLanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerLanguageId");

                    b.ToTable("SpeakerLanguageTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("SpeakerRegions");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerRegionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("text");

                    b.Property<int?>("SpeakerRegionId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerRegionId");

                    b.ToTable("SpeakerRegionTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerSex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("SpeakerSexes");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerSexTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CultureName")
                        .HasColumnType("text");

                    b.Property<int?>("SpeakerSexId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerSexId");

                    b.ToTable("SpeakerSexTranslation");
                });

            modelBuilder.Entity("Gos.Core.Entities.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int?>("DiscourseId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("SpeakerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiscourseId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Gos.Core.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConversationalForm")
                        .HasColumnType("text");

                    b.Property<int>("DiscourseOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Lemma")
                        .HasColumnType("text");

                    b.Property<string>("Msd")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("integer");

                    b.Property<string>("StandardForm")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Gos.Core.Entities.Discourse", b =>
                {
                    b.HasOne("Gos.Core.Entities.DiscourseChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Gos.Core.Entities.DiscourseEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Gos.Core.Entities.DiscourseRegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Gos.Core.Entities.DiscourseType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Channel");

                    b.Navigation("Event");

                    b.Navigation("Region");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseChannelTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.DiscourseChannel", null)
                        .WithMany("Translations")
                        .HasForeignKey("DiscourseChannelId");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseEventTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.DiscourseEvent", null)
                        .WithMany("Translations")
                        .HasForeignKey("DiscourseEventId");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseRegionTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.DiscourseRegion", null)
                        .WithMany("Translations")
                        .HasForeignKey("DiscourseRegionId");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseTypeTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.DiscourseType", null)
                        .WithMany("Translations")
                        .HasForeignKey("DiscourseTypeId");
                });

            modelBuilder.Entity("Gos.Core.Entities.MsdTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.Msd", null)
                        .WithMany("Translations")
                        .HasForeignKey("MsdId");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttribute", b =>
                {
                    b.HasOne("Gos.Core.Entities.PartOfSpeech", null)
                        .WithMany("Attributes")
                        .HasForeignKey("PartOfSpeechId");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttributeTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.PartOfSpeechAttribute", null)
                        .WithMany("Translations")
                        .HasForeignKey("PartOfSpeechAttributeId");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttributeValue", b =>
                {
                    b.HasOne("Gos.Core.Entities.PartOfSpeechAttribute", null)
                        .WithMany("Values")
                        .HasForeignKey("PartOfSpeechAttributeId");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttributeValueTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.PartOfSpeechAttributeValue", null)
                        .WithMany("Translations")
                        .HasForeignKey("PartOfSpeechAttributeValueId");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.PartOfSpeech", null)
                        .WithMany("Translations")
                        .HasForeignKey("PartOfSpeechId");
                });

            modelBuilder.Entity("Gos.Core.Entities.Segment", b =>
                {
                    b.HasOne("Gos.Core.Entities.Statement", "Statement")
                        .WithMany()
                        .HasForeignKey("StatementId");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Gos.Core.Entities.Speaker", b =>
                {
                    b.HasOne("Gos.Core.Entities.SpeakerAge", "Age")
                        .WithMany()
                        .HasForeignKey("AgeId");

                    b.HasOne("Gos.Core.Entities.SpeakerEducation", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId");

                    b.HasOne("Gos.Core.Entities.SpeakerLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Gos.Core.Entities.SpeakerRegion", "Region1")
                        .WithMany()
                        .HasForeignKey("Region1Id");

                    b.HasOne("Gos.Core.Entities.SpeakerRegion", "Region2")
                        .WithMany()
                        .HasForeignKey("Region2Id");

                    b.HasOne("Gos.Core.Entities.SpeakerRegion", "Region3")
                        .WithMany()
                        .HasForeignKey("Region3Id");

                    b.HasOne("Gos.Core.Entities.SpeakerSex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.Navigation("Age");

                    b.Navigation("Education");

                    b.Navigation("Language");

                    b.Navigation("Region1");

                    b.Navigation("Region2");

                    b.Navigation("Region3");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerAgeTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.SpeakerAge", null)
                        .WithMany("Translations")
                        .HasForeignKey("SpeakerAgeId");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerEducationTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.SpeakerEducation", null)
                        .WithMany("Translations")
                        .HasForeignKey("SpeakerEducationId");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerLanguageTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.SpeakerLanguage", null)
                        .WithMany("Translations")
                        .HasForeignKey("SpeakerLanguageId");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerRegionTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.SpeakerRegion", null)
                        .WithMany("Translations")
                        .HasForeignKey("SpeakerRegionId");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerSexTranslation", b =>
                {
                    b.HasOne("Gos.Core.Entities.SpeakerSex", null)
                        .WithMany("Translations")
                        .HasForeignKey("SpeakerSexId");
                });

            modelBuilder.Entity("Gos.Core.Entities.Statement", b =>
                {
                    b.HasOne("Gos.Core.Entities.Discourse", "Discourse")
                        .WithMany()
                        .HasForeignKey("DiscourseId");

                    b.HasOne("Gos.Core.Entities.Speaker", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId");

                    b.Navigation("Discourse");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Gos.Core.Entities.Token", b =>
                {
                    b.HasOne("Gos.Core.Entities.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseChannel", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseEvent", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseRegion", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.DiscourseType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.Msd", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeech", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttribute", b =>
                {
                    b.Navigation("Translations");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Gos.Core.Entities.PartOfSpeechAttributeValue", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerAge", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerEducation", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerLanguage", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerRegion", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Gos.Core.Entities.SpeakerSex", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
